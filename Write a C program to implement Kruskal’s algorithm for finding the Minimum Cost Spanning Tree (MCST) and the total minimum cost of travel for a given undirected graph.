#include <stdio.h>

    for (int i = 0; i < V; i++)
        parent[i] = i;

    int edges = 0, min_cost = 0;

    while (edges < V - 1) {
        int min = INT_MAX, u = -1, v = -1;

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (i != j && find(parent, i) != find(parent, j) && cost[i][j] < min) {
                    min = cost[i][j];
                    u = i;
                    v = j;
                }
            }
        }

        if (u != -1 && v != -1) {
            union1(parent, rank, u, v);
            printf("Edge %d:(%d, %d) cost:%d\n", edges, u, v, cost[u][v]);
            min_cost += cost[u][v];
            edges++;
        }
    }

    printf("Minimum cost= %d\n", min_cost);

    free(parent);
    free(rank);
}


int main() {
    int V;
    printf("No of vertices: ");
    scanf("%d", &V);

    int **cost = (int **)malloc(V * sizeof(int *));
    for (int i = 0; i < V; i++)
        cost[i] = (int *)malloc(V * sizeof(int));

    printf("Adjacency matrix:\n");
    for (int i = 0; i < V; i++)
        for (int j = 0; j < V; j++)
            scanf("%d", &cost[i][j]);

    kruskalMST(cost, V);

    for (int i = 0; i < V; i++)
        free(cost[i]);
    free(cost);

    return 0;
}
